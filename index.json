[{"authors":["wallento"],"categories":null,"content":"Stefan Wallentowitz is a professor of computer engineering and computer architecture.\n","date":1627632000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1627632000,"objectID":"4ae4da61c8ddcf3ad22831ae3c2c4a2b","permalink":"/author/stefan-wallentowitz/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/stefan-wallentowitz/","section":"authors","summary":"Stefan Wallentowitz is a professor of computer engineering and computer architecture.","tags":null,"title":"Stefan Wallentowitz","type":"authors"},{"authors":["Stefan Wallentowitz"],"categories":["SHK"],"content":"Im Rahmen der Veranstaltung \u0026ldquo;Technische Informatik 1\u0026rdquo; müssen die Studierenden ein Laborbuch führen in dem Sie die Vorbereitung und Durchführung der Praktikumsversuche dokumentieren. Dieses Laborbuch soll in Zukunft digital geführt werden.\nAls Kandidat haben wir dafür Jupyterlab ausgewählt und wollen es im kommenden Semester testen. Dafür suchen wir Unterstützung bei der technischen Umsetzung und Adaption.\nSie sollten mitbringen:\n Grundlegende Kenntnisse in Webtechnologien (JavaScript, HTML, CSS) Grundlegende Kenntnisse in Python  Informationen zur Vergütung finden Sie hier: Vergütungstabelle für studentische Hilfskräfte\nBei Interesse und Fragen wenden Sie sich bitte per E-Mail an mich: stefan.wallentowitz@hm.edu\n","date":1627632000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627632000,"objectID":"24879d75f1c0c4b1eaf5acf1220c0d4b","permalink":"/jobs/20210730-jupyter/","publishdate":"2021-07-30T10:00:00+02:00","relpermalink":"/jobs/20210730-jupyter/","section":"jobs","summary":"Im Rahmen der Veranstaltung \u0026ldquo;Technische Informatik 1\u0026rdquo; müssen die Studierenden ein Laborbuch führen in dem Sie die Vorbereitung und Durchführung der Praktikumsversuche dokumentieren. Dieses Laborbuch soll in Zukunft digital geführt werden.","tags":[],"title":"Studentische Hilfskraft 'Laborbuch mit Jupyterlab'","type":"jobs"},{"authors":["Stefan Wallentowitz"],"categories":["SHK"],"content":"Für unsere Lehrveranstaltung \u0026ldquo;IT-Systeme Grundlagen\u0026rdquo; suchen wir Unterstützung bei der Weiterentwicklung des Visual Studio Code Plugins für RISC-V. Im Vordergrund steht dabei die technische Weiterentwicklung des Simulators für die Interaktion mit Betriebssystemen und der Außenwelt, sowie die Erstellung von Visualisierungen und Demos.\nSie sollten mitbringen:\n Grundlegende Kenntnisse in TypeScript, JavaScript, HTML, CSS Ein rudimentäres Verständnis der IT-Systeme  Informationen zur Vergütung finden Sie hier: Vergütungstabelle für studentische Hilfskräfte\nBei Interesse und Fragen wenden Sie sich bitte per E-Mail an mich: stefan.wallentowitz@hm.edu\n","date":1627632000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627632000,"objectID":"f977552fd1524007c553d7debdddfd6e","permalink":"/jobs/20210730-vscode/","publishdate":"2021-07-30T10:00:00+02:00","relpermalink":"/jobs/20210730-vscode/","section":"jobs","summary":"Für unsere Lehrveranstaltung \u0026ldquo;IT-Systeme Grundlagen\u0026rdquo; suchen wir Unterstützung bei der Weiterentwicklung des Visual Studio Code Plugins für RISC-V. Im Vordergrund steht dabei die technische Weiterentwicklung des Simulators für die Interaktion mit Betriebssystemen und der Außenwelt, sowie die Erstellung von Visualisierungen und Demos.","tags":[],"title":"Studentische Hilfskraft 'Visual Studio Code Plugin'","type":"jobs"},{"authors":["Stefan Wallentowitz"],"categories":["Tutor:in"],"content":"Für unsere Erstsemester-Veranstaltungen \u0026ldquo;Technische Informatik 1\u0026rdquo; und \u0026ldquo;IT-Systeme Grundlagen\u0026rdquo; suchen wir für das Wintersemester 2021/2022 Tutor:innen.\nIhre Aufgaben:\n Unterstützung der Studierenden bei praktischen Versuchen in Präsenz (sofern möglich) Unterstützung der Studierenden bei praktischen Versuchen online Mitarbeit bei der Abnahme der Laborbücher  Die Veranstaltungen werden nacheinander geblockt durchgeführt: Technische Informatik 1 im Oktober und November und IT-Systeme Grundlagen im Dezember und Januar. Die Praktika sind montags und dienstags.\nIdealerweise sollten Sie am Montag vormittag, Montag nachmittag oder Dienstag nachmittag Zeit haben uns bei der Durchführung zu helfen.\nInformationen zur Vergütung finden Sie hier: Vergütung für TutorInnen\nBei Interesse und Fragen wenden Sie sich bitte per E-Mail an mich: stefan.wallentowitz@hm.edu\n","date":1627632000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627632000,"objectID":"f1d75d3206cea997e625e9de6b1eda53","permalink":"/jobs/20210730-tutor-ti_it/","publishdate":"2021-07-30T10:00:00+02:00","relpermalink":"/jobs/20210730-tutor-ti_it/","section":"jobs","summary":"Für unsere Erstsemester-Veranstaltungen \u0026ldquo;Technische Informatik 1\u0026rdquo; und \u0026ldquo;IT-Systeme Grundlagen\u0026rdquo; suchen wir für das Wintersemester 2021/2022 Tutor:innen.\nIhre Aufgaben:\n Unterstützung der Studierenden bei praktischen Versuchen in Präsenz (sofern möglich) Unterstützung der Studierenden bei praktischen Versuchen online Mitarbeit bei der Abnahme der Laborbücher  Die Veranstaltungen werden nacheinander geblockt durchgeführt: Technische Informatik 1 im Oktober und November und IT-Systeme Grundlagen im Dezember und Januar.","tags":[],"title":"Tutor:in 'Techische Informatik' und 'IT-Systeme Grundlagen'","type":"jobs"},{"authors":["Stefan Wallentowitz"],"categories":["Verilator"],"content":" Verilator is a very popular open source Verilog to C++ compiler and simulator. One functionality of Verilator that is used increasingly is to use its linter functionality, either locally or as part of continuous integration. The linter reports problems with your design that might lead to issues.\nWith the incredible influx of open source digital designs, I have seen many projects adding support for Verilator as an open source alternative to proprietary simulators over the last couple of years. But, not surprisingly, there are often dozens of warnings emitted by the linter.\nLinter warnings could be style issues or actual problems. Hence you would prefer to use -Wall or even -Wall -Wpedantic to be sure your code style is just fine. For example the following Verilog code ( from the Verilator tests) will lead to a linter warning.\n always @(posedge clk) begin sync_blk = 1'b1; sync_blk2 = 1'b1; // Only warn once per block sync_nblk \u0026lt;= 1'b1; end  %Warning-BLKSEQ: t/t_lint_blksync_bad.v:24:16: Blocking assignments (=) in sequential (flop or latch) block : ... Suggest delayed assignments (\u0026lt;=) 24 | sync_blk = 1'b1; | ^ ... Use \u0026quot;/* verilator lint_off BLKSEQ */\u0026quot; and lint_on around source to disable this message.  The warning is a style warning that can indicate a simulation/synthesis mismatch due to races in the simulator. In Verilator it will simulate correctly, but it is generally bad style to do it, hence its a linter warning.\nIt can be solved in different ways:\n  As suggested by the warning message, the line should be changed to sync_blk \u0026lt;= 1'b1;. I cannot think of a use case where the original line was intended.\n  You can disable this style warning in general on the command line with -Wno-BLKSEQ. This has the drawback that it will disable this warning globally and you may in future add such a statement accidentally and not notice, not nice.\n  As the message suggests as an alternative, you can add a comment around the statements to disable the warning for those warnings:\nalways @(posedge clk) begin /* verilator lint_off BLKSEQ */ sync_blk = 1'b1; sync_blk2 = 1'b1; /* verilator lint_on BLKSEQ */ sync_nblk \u0026lt;= 1'b1; end  This is some kind of good solution, in case you and your team have agreed that the assignments should not be changed. Probably, you want to add another comment why exactly you believe this is a good idea.\nAn advantage is that the issue and its solution are directly linked, which is a good idea in general. The drawback of this approach is that it needs you are touching the code to silence the Verilator linter, especially if you are using third-party code. This may be undesirable, especially if your tool zoo is large.\n  Waiver statements At last RISC-V workshop I had a breakfast discussion with my fellow FOSSi Foundation director Philipp Wagner who works at lowRISC. He suggested there should be better alternatives to solve this issue. The toy example above obviously doesn\u0026rsquo;t require it, but there are other warnings and situations when you just want to silence particular warnings that you have carefully checked and concluded they can be tolerated: For example unused variable warnings or assignment widths can indicate an issue, but are often the result of how your design is organized (such as defines and paramters).\nThe solution to this is to use a more fine-granular, but non-invasive approach: waivers. A waiver tells a tools that you are aware of a warning, but you are okay with it. It will thereby suppress warnings that you want to tolerate. It makes it easier to detect newly introduced errors and you can enter the ideal world of -Wall -Wpedantic while suppressing known warnings.\nSo, on my way back from San Jose I started the work on waivers in Verilator, which are part of Verilator since version 4.028. In Verilator you can add configuration files (typically ending in .vlt) that define configuration settings from a file. What was initially added is the very useful equivalent of the inline comment from above:\n`verilator_config lint_off -rule BLKSEQ -file \u0026quot;t/t_lint_blksync_bad.v\u0026quot; -lines 24-25  Just add this file to the build and the warning is waived. This waiver is already very nice, but there are certain warnings where you want to make sure that only a particular instance of them is waived. The -match flag sets a known message (with wildcards to keep things simple). If the warning changes, you will have to revisit it. The first adopter of this syntax is the LowRISC team for their ibex core. There is a verilator config file that defines the waivers, for example as entire class of warnings (lint_off -rule PINCONNECTEMPTY) or with particular messages that is suppressed (lint_off -rule WIDTH -file \u0026quot;*/rtl/ibex_core_tracing.sv\u0026quot; -match \u0026quot;*'RV32M'*\u0026quot;).\nI believe this is a very powerful feature of Verilator and I strongly encourage projects to use waiver files in combination with -Wall -Wpedantic. Even if you use other simulation or synthesis tools, using Verilator as linter will increase code quality significantly, in my opinion, which for example is crucial to the success of open source silicon (but not limited to it, I hope ;).\nAuto-generate waiver file I have recently looked at many open source designs and found that Verilator is supported out-of-the-box by nearly all of them, but too often I find -Wno-lint or the rule-based warning suppressions. I wanted to approach the projects and propose them to use waiver files. But I felt it would be nicer to open a PR instead that removes the -Wno-lint and either solve the issues (oh, boy) or add an appropriate waiver file with the invitation to review and resolve it. But for that my bandwidth is just too limited. I felt it was better invested in an extension to Verilator that automates this process. Hence, since Verilator 4.036 there is a new flag --waiver-output \u0026lt;filename\u0026gt; that emits a template for the waiver file with all warnings emitted.\nFor example you can find the regression test:\nmodule t_waiveroutput; reg width_warn = 2'b11; endmodule  Running Verilator as linter or normally will give us a width warning and in my opinion should error (-Wall -Wpedantic). Instead of resisting to be pedantic, lets get the waiver file with --waiver-output:\n// DESCRIPTION: Verilator output: Waivers generated with --waiver-output `verilator_config // Below you find suggested waivers. You have three options: // 1. Fix the reason for the linter warning // 2. Keep the waiver permanently if you are sure this is okay // 3. Keep the waiver temporarily to suppress the output // lint_off -rule WIDTH -file \u0026quot;*t/t_waiveroutput.v\u0026quot; -match \u0026quot;Operator ASSIGN expects 1 bits on the Assign RHS, but Assign RHS's CONST '2'h3' generates 2 bits.\u0026quot; // lint_off -rule UNUSED -file \u0026quot;*t/t_waiveroutput.v\u0026quot; -match \u0026quot;Signal is not used: 'width_warn'\u0026quot;  The idea is now that you and your team review the individual warnings and either remove the issue, or un-comment the line and add a comment about why this is a good idea to waive.\nIn my opinion this is an excellent starting point to tackle your code quality, have a solid linter flow. I hope it helps you!\nNext, I will start creating PR with waiver files with many TODOs in them :)\nUpdate: Waiver vs. pragma-style In the post I have missed to discuss that there is a good reason to use the inline comments/pragmas versus waiver files. It is certainly a good idea to have the solution visually next to the problem and this approach is widely used in teams that use Verilator as one of their main tools. Waivers are especially useful with third-party code. Overall its also a matter of preference and waivers are probably preferable when you start using Verilator in a large project.\nBut, summarized: There is no reason anymore to not use Verilator as Linter in your project!\n","date":1591962461,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591962461,"objectID":"f2f1d4e9cedad6081fa6c8634ab1e9e7","permalink":"/post/20200612-verilator-waivers/","publishdate":"2020-06-12T13:47:41+02:00","relpermalink":"/post/20200612-verilator-waivers/","section":"post","summary":"Verilator is a very popular open source Verilog to C++ compiler and simulator. One functionality of Verilator that is used increasingly is to use its linter functionality, either locally or as part of continuous integration.","tags":["Verilator"],"title":"Verilator Waivers","type":"post"}]